using Xunit;
using Moq;
using FluentAssertions;
using Application.UseCase.ClientServices;
using Application.Interfaces.ICommand;
using Application.Interfaces.IValidator;
using Application.Request;
using Application.Response;
using Domain.Entities;
using System.Threading.Tasks;
using Task = System.Threading.Tasks.Task;
using Application.Models;
using FluentValidation;

namespace UnitTest.UseCase.ClientServices
{
    public class ClientPostServicesTests
    {
        [Fact]
        public async Task CreateClient_ShouldReturnClientsResponse_WhenRequestIsValid()
        {
            // Arrange
            var mockCommand = new Mock<IClientCommand>();
            var mockValidator = new Mock<IValidatorHandler<ClientsRequest>>();

            var validRequest = new ClientsRequest
            {
                Name = "Client1",
                Email = "client1@example.com",
                Phone = "123456789",
                Company = "Company1",
                Address = "Address1"
            };

            // Set up the mock to simulate inserting the client and assigning an ID
            mockCommand.Setup(c => c.InsertClient(It.IsAny<Client>()))
                .Callback<Client>(client => client.ClientID = 1)          // Simulate the ID assignment
                .Returns(Task.CompletedTask);

            var service = new ClientPostServices(mockCommand.Object, mockValidator.Object);

            // Act
            Clients result = await service.CreateClient(validRequest);

            // Assert
            result.Should().NotBeNull();
            result.Id.Should().Be(1);      // Verify that the autogenerated ID is 1
            result.Name.Should().Be("Client1");
            result.Email.Should().Be("client1@example.com");
            result.Phone.Should().Be("123456789");
            result.Company.Should().Be("Company1");
            result.Address.Should().Be("Address1");
        }

        [Fact]
        public async Task CreateClient_ShouldThrowException_WhenRequestIsInvalid()
        {
            // Arrange
            var mockCommand = new Mock<IClientCommand>();
            var mockValidator = new Mock<IValidatorHandler<ClientsRequest>>();

            var invalidRequest = new ClientsRequest();

            mockValidator.Setup(v => v.Validate(invalidRequest)).ThrowsAsync(new ValidationException("Invalid request"));

            var service = new ClientPostServices(mockCommand.Object, mockValidator.Object);

            // Act
            Func<Task> act = async () => { await service.CreateClient(invalidRequest); };

            // Assert
            await act.Should().ThrowAsync<ValidationException>().WithMessage("Invalid request");
        }
    }
}
